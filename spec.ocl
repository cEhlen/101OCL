context Company
inv: not name.oclIsUndefined() and name <> ""
inv: not departments.oclIsUndefined()
inv: complyRankedSalaries()

-- Add a department to the `departments' collection.
context Company::addDepartment(dep:Department)
pre: departments->excludes(dep)
pre: departments->forAll(not contains(dep))
post: departments->includes(dep)

-- Remove a department from the `departments' collection
context Company::removeDepartment(dep:Department)
pre: departments->notEmpty()
pre: departments->includes(dep)
post: departments->excludes(dep)

-- Returns the sum of all salaries
context Company::total():Real
pre: departments->notEmpty()
body: departments->collect(total())->sum()

context Company::cut()
post: total() = total()@pre / 2

context Company::complyRankedSalaries():Boolean
body:
    departments->forAll(complyRankedSalaries())

context Company::contains(e:Employee):Boolean
body:
    departments->forAll(containsEmployee(e))

------------------------------------------------------------------------------
-- Department
context Department
inv: not manager.oclIsUndefined()
inv: not employees.oclIsUndefined()
inv: not departments.oclIsUndefined()
inv: company->complyRankedSalaries()

context Department::total():Real
body:
    employees->collect(salary)->sum() +
    manager.salary +
    departments->collect(total())->sum()

context Department::cut()
post: total() = total()@pre / 2.0

context Department::complyRankedSalaries():Boolean
body:
    let minSalary : Real = employees->sortedBy(salary)->first().salary in
        Not employees->exists(self.salary > manager.salary) And
        demartments->forAll(complyRankedSalaries(minSalary))

context Department::complyRankedSalaries(max:Real):Boolean
body:
    let minSalary : Real = employees->sortedBy(salary)->first().salary in
        max > manager.salary And
        Not employees->exists(self.salary > manager.salary) And
        demartments->forAll(complyRankedSalaries(minSalary))

context Department::addEmployee(e:Employee)
pre: employees->excludes(e)
pre: not company->contains(e) 
post: employees->contains(e)

context Department::removeEmployee(e:Employee)
pre: employees->contains(e)
post: employees->excludes(e)

-- Checks if `dep' is a subdepartment of this department
context Department::contains(dep:Department):Boolean
body:
    departments->contains(dep) Or deparments->forAll(contains(dep))

-- Checks if the Employee `e' is employed in this department or subdepartments
context Department::contains(e:Employee):Boolean
body:
    departments->contains(e) Or deparments->forAll(contains(e))


------------------------------------------------------------------------------
-- Employee
context Employee
inv: salary >= 0
inv: not name.oclIsUndefined()
inv: not address.oclIsUndefined()
inv: company->complyRankedSalary()

context Employee::cut()
post: salary = salary@pre / 2.0

context Employee:setSalary(s:Real)
post: salary = s
